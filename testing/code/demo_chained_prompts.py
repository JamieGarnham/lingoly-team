#!/usr/bin/env python3
"""
Demo script to show the prompts generated by the chained prompting approach
"""

import json
import sys
from collections import defaultdict

# Add current directory to path (now in same folder)
sys.path.append('.')

# Import the functions from our chained prompting script
from chained_prompting_rosetta import load_questions, create_reasoning_prompt, create_question_prompt

def demo_prompts(benchmark_file: str = "../data/splits/benchmark_same_obf_rosetta.jsonl", max_problems: int = 1):
    """Demo the prompts generated for chained prompting"""
    
    # Load questions
    questions_by_problem = load_questions(benchmark_file)
    
    if max_problems:
        problem_numbers = sorted(list(questions_by_problem.keys()))[:max_problems]
        questions_by_problem = {n: questions_by_problem[n] for n in problem_numbers}
    
    for problem_n, problem_data in questions_by_problem.items():
        print(f"{'='*80}")
        print(f"PROBLEM {problem_n} - CHAINED PROMPTING DEMO")
        print(f"{'='*80}")
        
        # Show the reasoning prompt
        reasoning_prompt = create_reasoning_prompt(problem_data)
        print(f"\n{'='*50}")
        print("STEP 1: REASONING PROMPT")
        print(f"{'='*50}")
        print(reasoning_prompt)
        
        print(f"\n{'='*50}")
        print("STEP 2: INDIVIDUAL QUESTION PROMPTS")
        print(f"{'='*50}")
        
        # Show each question prompt
        for i, question_data in enumerate(problem_data, 1):
            question_prompt = create_question_prompt(question_data)
            print(f"\n--- Question {i}: {question_data['question_details']['question_n']} ---")
            print(question_prompt)
            print()

if __name__ == "__main__":
    demo_prompts()